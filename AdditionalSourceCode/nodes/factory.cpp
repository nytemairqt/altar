/** Autogenerated Main.cpp. */

// =================================| Include only the DSP files  |=================================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// ===========================| Now we can add the rest of the codebase |===========================

#include <JuceHeader.h>

#if !JUCE_WINDOWS
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

// =======================================| Project Factory |=======================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations ----------------------------------------------------------------------
		
		registerPolyNode<project::tuner<1>, scriptnode::wrap::illegal_poly<project::tuner<1>>>();
		registerPolyNode<project::transpose<1>, scriptnode::wrap::illegal_poly<project::transpose<1>>>();
		registerPolyNode<project::ringmod<1>, scriptnode::wrap::illegal_poly<project::ringmod<1>>>();
		registerPolyNode<project::reverb<1>, scriptnode::wrap::illegal_poly<project::reverb<1>>>();
		registerPolyNode<project::preprocess<1>, scriptnode::wrap::illegal_poly<project::preprocess<1>>>();
		registerPolyNode<project::postprocess<1>, scriptnode::wrap::illegal_poly<project::postprocess<1>>>();
		registerPolyNode<project::overdrive<1>, scriptnode::wrap::illegal_poly<project::overdrive<1>>>();
		registerPolyNode<project::gate<1>, scriptnode::wrap::illegal_poly<project::gate<1>>>();
		registerPolyNode<project::delay<1>, scriptnode::wrap::illegal_poly<project::delay<1>>>();
		registerPolyNode<project::chorus<1>, scriptnode::wrap::illegal_poly<project::chorus<1>>>();
		registerPolyNode<project::cabDesigner<1>, scriptnode::wrap::illegal_poly<project::cabDesigner<1>>>();
		registerPolyNode<project::amp<1>, scriptnode::wrap::illegal_poly<project::amp<1>>>();
		registerPolyNode<project::cab<1>, wrap::illegal_poly<project::cab<1>>>();
		registerPolyNode<project::cabDesignerNetwork<1>, wrap::illegal_poly<project::cabDesignerNetwork<1>>>();
		registerPolyNode<project::chug<1>, wrap::illegal_poly<project::chug<1>>>();
		registerPolyNode<project::click<1>, wrap::illegal_poly<project::click<1>>>();
		registerPolyNode<project::octave<1>, wrap::illegal_poly<project::octave<1>>>();
		registerPolyNode<project::pick<1>, wrap::illegal_poly<project::pick<1>>>();
		registerDataNode<project::tuner_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#if !JUCE_WINDOWS
#pragma clang diagnostic pop
#endif


